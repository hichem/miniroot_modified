include $(TOOLCHAIN_DIR)/toolchain_config.mk

UARCH := $(shell $(TOOLCHAIN_DIR)/utils.sh 'upper' '$(TARGET_ARCH)')
UVARIANT := $(shell $(TOOLCHAIN_DIR)/utils.sh 'upper' '$(TARGET_VARIANT)')
GCC_VERSION_CHECK := $(shell $(TOOLCHAIN_DIR)/utils.sh 'check_gcc' '4.3')

## Target options

SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH[= ].*/CT_ARCH=\"$(TARGET_ARCH)\"/;

## Architecture features
ifeq ($(TARGET_ARCH), sh)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORTS_BOTH_ENDIAN[= ].*/CT_ARCH_SUPPORTS_BOTH_ENDIAN=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_DEFAULT_LE.*/CT_ARCH_DEFAULT_LE=y/;
else ifeq ($(TARGET_ARCH), alpha)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORT_CPU[= ].*/CT_ARCH_SUPPORT_CPU=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORT_TUNE[= ].*/CT_ARCH_SUPPORT_TUNE=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_CPU[= ].*/CT_ARCH_CPU=\"\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_TUNE[= ].*/CT_ARCH_TUNE=\"\"/;
else ifeq ($(TARGET_ARCH), arm)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORT_CPU[= ].*/CT_ARCH_SUPPORT_CPU=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_CPU[= ].*/CT_ARCH_CPU=\"\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORT_TUNE[= ].*/CT_ARCH_SUPPORT_TUNE=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_TUNE[= ].*/CT_ARCH_TUNE=\"\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORTS_BOTH_ENDIAN[= ].*/CT_ARCH_SUPPORTS_BOTH_ENDIAN=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_DEFAULT_LE.*/CT_ARCH_DEFAULT_LE=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORT_ARCH[= ].*/CT_ARCH_SUPPORT_ARCH=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORT_FPU[= ].*/CT_ARCH_SUPPORT_FPU=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_FPU[= ].*/CT_ARCH_FPU=\"\"/;
else ifeq ($(TARGET_ARCH), mips)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORT_CPU[= ].*/CT_ARCH_SUPPORT_CPU=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORT_TUNE[= ].*/CT_ARCH_SUPPORT_TUNE=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORTS_BOTH_ENDIAN[= ].*/CT_ARCH_SUPPORTS_BOTH_ENDIAN=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_DEFAULT_BE.*/CT_ARCH_DEFAULT_BE=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORT_ARCH[= ].*/CT_ARCH_SUPPORT_ARCH=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_CPU[= ].*/CT_ARCH_CPU=\"\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_TUNE[= ].*/CT_ARCH_TUNE=\"\"/;
else ifeq ($(TARGET_ARCH), ia64)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORTS_BOTH_ENDIAN[= ].*/CT_ARCH_SUPPORTS_BOTH_ENDIAN=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_64[= ].*/CT_ARCH_64=y/;
else ifeq ($(TARGET_ARCH), powerpc)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORT_CPU[= ].*/CT_ARCH_SUPPORT_CPU=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORT_TUNE[= ].*/CT_ARCH_SUPPORT_TUNE=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORT_ABI[= ].*/CT_ARCH_SUPPORT_ABI=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_CPU[= ].*/CT_ARCH_CPU=\"\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_TUNE[= ].*/CT_ARCH_TUNE=\"\"/;
else ifeq ($(TARGET_ARCH), x86_64)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORT_CPU[= ].*/CT_ARCH_SUPPORT_CPU=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORT_TUNE[= ].*/CT_ARCH_SUPPORT_TUNE=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORT_ARCH[= ].*/CT_ARCH_SUPPORT_ARCH=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_64[= ].*/CT_ARCH_64=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_CPU[= ].*/CT_ARCH_CPU=\"\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_TUNE[= ].*/CT_ARCH_TUNE=\"\"/;
else ifeq ($(TARGET_ARCH), x86)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORT_CPU[= ].*/CT_ARCH_SUPPORT_CPU=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORT_TUNE[= ].*/CT_ARCH_SUPPORT_TUNE=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORT_ARCH[= ].*/CT_ARCH_SUPPORT_ARCH=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_CPU[= ].*/CT_ARCH_CPU=\"\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_TUNE[= ].*/CT_ARCH_TUNE=\"\"/;
endif

ifdef TARGET_VARIANT
ifeq ($(TARGET_ARCH), sh)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_ARCH_AVARIANT[= ].*/CT_ARCH_$(UARCH)_$(UVARIANT)=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_ARCH_VARIANT[= ].*/CT_ARCH_$(UARCH)_VARIANT=\"$(TARGET_VARIANT)\"/;
else ifeq ($(TARGET_ARCH), alpha)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_ARCH_AVARIANT[= ].*/CT_ARCH_$(UARCH)_$(UVARIANT)=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_ARCH_VARIANT[= ].*/CT_ARCH_$(UARCH)_VARIANT=\"$(TARGET_VARIANT)\"/;
else
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_ARCH[= ].*/CT_ARCH_ARCH=\"$(TARGET_VARIANT)\"/;
endif
endif

SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_$(TARGET_ARCH)[= ].*/CT_ARCH_$(TARGET_ARCH)=y/;
ifeq ($(TARGET_ABI), eabi)
#SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_ABI[= ].*/CT_ARCH_ABI=\"\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_ARCH_EABI.*/CT_ARCH_$(UARCH)_EABI=y/;
else ifeq ($(TARGET_ABI), abi)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORT_ABI[= ].*/CT_ARCH_SUPPORT_ABI=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_ABI[= ].*/CT_ARCH_ABI=\"\"/;
ifeq ($(TARGET_ARCH), arm)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_ARM_ABI_OK.*/CT_ARCH_ARM_ABI_OK=y/;
endif
endif

ifeq ($(TARGET_ENDIANNESS), little)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_LE.*/CT_ARCH_LE=y/;
else ifeq ($(TARGET_ENDIANNESS), big)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_BE.*/CT_ARCH_BE=y/;
endif

ifeq ($(TARGET_FLOAT), software)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_SUPPORT_FPU.*/CT_ARCH_SUPPORT_FPU=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_FLOAT_SW.*/CT_ARCH_FLOAT_SW=y/;
else ifeq ($(TARGET_FLOAT), hardware)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_ARCH_FLOAT_HW.*/CT_ARCH_FLOAT_HW=y/;
endif

## Toolchain options

ifeq ($(SYSROOT), yes)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_USE_SYSROOT.*/CT_USE_SYSROOT=y/;
endif

ifeq ($(BUILD_SHARED_LIB), yes)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_SHARED_LIBS.*/CT_SHARED_LIBS=y/;
endif

SED_SCRIPT := $(SED_SCRIPT)s/.*CT_TARGET_VENDOR.*/CT_TARGET_VENDOR=$(MANUFACTURER)/;

## Target OS

SED_SCRIPT := $(SED_SCRIPT)s/.*CT_KERNEL[= ].*/CT_KERNEL=\"$(TARGET_OS)\"/;

ifeq ($(TARGET_OS), linux)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_KERNEL_VERSION.*/CT_KERNEL_VERSION=\"$(KERNEL_VERSION)\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_KERNEL_linux.*/CT_KERNEL_linux=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_KERNEL_LINUX_INSTALL[= ].*/CT_KERNEL_LINUX_INSTALL=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_KERNEL_LINUX_INSTALL_CHECK.*/CT_KERNEL_LINUX_INSTALL_CHECK=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_KERNEL_LINUX_VERBOSITY_0.*/CT_KERNEL_LINUX_VERBOSITY_0=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_KERNEL_LINUX_VERBOSE_LEVEL.*/CT_KERNEL_LINUX_VERBOSE_LEVEL=0/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_KERNEL_V_$(subst .,_,$(LIBC_VERSION))[= ].*/CT_KERNEL_V_$(subst .,_,$(LIBC_VERSION))=y/;
else
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_BARE_METAL.*/CT_BARE_METAL=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_KERNEL_bare_metal.*/CT_KERNEL_bare_metal=y/;
endif

## GMP and MPFR

ifdef GMP_MPFR
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_GMP_MPFR[= ].*/CT_GMP_MPFR=y/;
#SED_SCRIPT := $(SED_SCRIPT)s/.*CT_GMP_MPFR_TARGET[= ].*/CT_GMP_MPFR_TARGET=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_GMP_CHECK.*/CT_GMP_CHECK=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_MPFR_CHECK.*/CT_MPFR_CHECK=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_GMP_VERSION.*/CT_GMP_VERSION=\"$(GMP_VERSION)\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_MPFR_VERSION.*/CT_MPFR_VERSION=\"$(MPFR_VERSION)\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_GMP_V_$(subst .,_,$(GMP_VERSION)).*/CT_GMP_V_$(subst .,_,$(GMP_VERSION))=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_MPFR_V_$(subst .,_,$(MPFR_VERSION)).*/CT_MPFR_V_$(subst .,_,$(MPFR_VERSION))=y/;
endif

## Binutils

ifeq ($(origin $(or $(LIBFD), $(LIBIBERTY))), undefined)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_BINUTILS_FOR_TARGET[= ].*/CT_BINUTILS_FOR_TARGET=y/;
endif

ifeq ($(LIBBFD), yes)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_BINUTILS_FOR_TARGET_BFD[= ].*/CT_BINUTILS_FOR_TARGET_BFD=y/;
endif

ifeq ($(LIBIBERTY), yes)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_BINUTILS_FOR_TARGET_IBERTY[= ].*/CT_BINUTILS_FOR_TARGET_IBERTY=y/;
endif

SED_SCRIPT := $(SED_SCRIPT)s/.*CT_BINUTILS_VERSION[= ].*/CT_BINUTILS_VERSION=\"$(BINUTILS_VERSION)\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_BINUTILS_V_$(subst ., _, $(BINUTILS_VERSION))[= ].*/CT_BINUTILS_V_$(subst ., _, $(BINUTILS_VERSION))=y/;

## C compiler
ifeq ($(CPP), yes)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_CC_LANG_CXX[= ].*/CT_CC_LANG_CXX=y/;
endif

ifeq ($(FORTRAN), yes)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_CC_LANG_FORTRAN[= ].*/CT_CC_LANG_FORTRAN=y/;
endif

ifeq ($(JAVA), yes)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_CC_LANG_JAVA[= ].*/CT_CC_LANG_JAVA=y/;
endif
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_CC_VERSION[= ].*/CT_CC_VERSION=\"$(GCC_VERSION)\"/;

ifeq ($(GCC_VERSION_CHECK), ok)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_CC_GCC_4_3_or_later[= ].*/CT_CC_GCC_4_3_or_later=y/;
endif

ifdef LIBC
ifeq ($(TARGET_ABI), eabi)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_CC_SJLJ_EXCEPTIONS_DONT_USE[= ].*/CT_CC_SJLJ_EXCEPTIONS_DONT_USE=y/;
else
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_CC_SJLJ_EXCEPTIONS_CONFIGURE[= ].*/CT_CC_SJLJ_EXCEPTIONS_CONFIGURE=y/;
endif
endif

SED_SCRIPT := $(SED_SCRIPT)s/.*CT_CC_V_$(subst .,_,$(GCC_VERSION))[= ].*/CT_CC_V_$(subst .,_,$(GCC_VERSION))=y/;

## C library

SED_SCRIPT := $(SED_SCRIPT)s/.*CT_LIBC[= ].*/CT_LIBC=\"$(LIBC)\"/;
ifdef LIBC
ifeq ($(LIBC), glibc)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_LIBC_glibc[= ].*/CT_LIBC_glibc=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_LIBC_GLIBC_KERNEL_VERSION_AS_HEADERS[= ].*/CT_LIBC_GLIBC_KERNEL_VERSION_AS_HEADERS=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_LIBC_GLIBC_MIN_KERNEL[= ].*/CT_LIBC_GLIBC_MIN_KERNEL=\"2.6.26.8\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_LIBC_GLIBC_EXTRA_CONFIG[= ].*/CT_LIBC_GLIBC_EXTRA_CONFIG=\"\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_LIBC_GLIBC_EXTRA_CFLAGS[= ].*/CT_LIBC_GLIBC_EXTRA_CFLAGS=\"\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_LIBC_EXTRA_CC_ARGS[= ].*/CT_LIBC_EXTRA_CC_ARGS=\"\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_LIBC_ADDONS_LIST[= ].*/CT_LIBC_ADDONS_LIST=\"\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_LIBC_GLIBC_USE_PORTS[= ].*/CT_LIBC_GLIBC_USE_PORTS=y/;
else ifeq ($(LIBC), uClibc)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_LIBC_uClibc[= ].*/CT_LIBC_uClibc=y/;
#SED_SCRIPT := $(SED_SCRIPT)s/.*CT_LIBC_UCLIBC_VERBOSITY_0[= ].*/CT_LIBC_UCLIBC_VERBOSITY_0=y/;
SED_SCRIPT := $(SED_SCRIPT)s,.*CT_LIBC_UCLIBC_CONFIG_FILE.*,CT_LIBC_UCLIBC_CONFIG_FILE=\"\${CT_LIB_DIR}/samples/\${CT_TARGET}/\${CT_LIBC}-\${CT_LIBC_VERSION}\.config\",;
else ifeq ($(LIBC), eglibc)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_LIBC_eglibc[= ].*/CT_LIBC_eglibc=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_EGLIBC_REVISION[= ].*/CT_EGLIBC_REVISION=\"HEAD\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_EGLIBC_CHECKOUT[= ].*/CT_EGLIBC_CHECKOUT=y/;
endif
endif

ifeq ($(LIBC), eglibc)
EG = "EG"
endif
ifdef LIBC
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_LIBC_VERSION[= ].*/CT_LIBC_VERSION=\"$(LIBC_VERSION)\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_$(EG)LIBC_V_$(subst .,_,$(LIBC_VERSION))[= ].*/CT_LIBC_V_$(subst .,_,$(LIBC_VERSION))=y/;
endif

SED_SCRIPT := $(SED_SCRIPT)s/.*CT_THREADS[= ].*/CT_THREADS=\"$(THREADING_LIB)\"/;
ifeq ($(THREADING_LIB), nptl)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_THREADS_NPTL.*/CT_THREADS_NPTL=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_LIBC_SUPPORT_NPTL[= ].*/CT_LIBC_SUPPORT_NPTL=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_LIBC_SUPPORT_LINUXTHREADS[= ].*/CT_LIBC_SUPPORT_LINUXTHREADS=y/;
else ifeq ($(THREADING_LIB), linuxthreads)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_THREADS_LINUXTHREADS[= ].*/CT_THREADS_LINUXTHREADS=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_LIBC_SUPPORT_LINUXTHREADS[= ].*/CT_LIBC_SUPPORT_LINUXTHREADS=y/;
else
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_THREADS_NONE[= ].*/CT_THREADS_NONE=y/;
endif

## Tools

ifeq ($(LIBELF), yes)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_TOOL_libelf[= ].*/CT_TOOL_libelf=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_LIBELF_V_0_8_10[= ].*/CT_LIBELF_V_0_8_10=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_LIBELF_VERSION[= ].*/CT_LIBELF_VERSION=\"0\.8\.10\"/;
endif

ifeq ($(SSTRIP), yes)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_TOOL_sstrip[= ].*/CT_TOOL_sstrip=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_SSTRIP_BUILDROOT[= ].*/CT_SSTRIP_BUILDROOT=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_SSTRIP_FROM[= ].*/CT_SSTRIP_FROM=\"buildroot\"/;
endif

## Debug

ifeq ($(DMALLOC), yes)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_DEBUG_dmalloc[= ].*/CT_DEBUG_dmalloc=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_DMALLOC_VERSION[= ].*/CT_DMALLOC_VERSION=\"5\.5\.2\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_DMALLOC_V_5_5_2[= ].*/CT_DMALLOC_V_5_5_2=y/;
endif

ifeq ($(DUMA), yes)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_DEBUG_duma[= ].*/CT_DEBUG_duma=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_DUMA_A[= ].*/CT_DUMA_A=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_DUMA_SO[= ].*/CT_DUMA_SO=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_DUMA_VERSION[= ].*/CT_DUMA_VERSION=\"2_5_14\"/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_DUMA_V_2_5_14[= ].*/CT_DUMA_V_2_5_14=y/;
endif

ifeq ($(GDB), yes)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_GDB_GDBSERVER[\= \].*/CT_GDB_GDBSERVER=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_GDB_GDBSERVER_STATIC[= ].*/CT_GDB_GDBSERVER_STATIC=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_GDB_NATIVE[= ].*/CT_GDB_NATIVE=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_GDB_CROSS[= ].*/CT_GDB_CROSS=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_GDB_V_6_8[= ].*/CT_GDB_V_6_8=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_GDB_VERSION[= ].*/CT_GDB_VERSION=\"6\.8\"/;
endif

ifeq ($(LTRACE), yes)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_DEBUG_ltrace[= ].*/CT_DEBUG_ltrace=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_LTRACE_V_0_5[= ].*/CT_LTRACE_V_0_5=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_LTRACE_VERSION[= ].*/CT_LTRACE_VERSION=\"0\.5\"/;
endif

ifeq ($(STRACE), yes)
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_DEBUG_strace[= ].*/CT_DEBUG_strace=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_STRACE_V_4_5_17[= ].*/CT_STRACE_V_4_5_17=y/;
SED_SCRIPT := $(SED_SCRIPT)s/.*CT_STRACE_VERSION[= ].*/CT_STRACE_VERSION=\"4\.5\.17\"/;
endif

SED_SCRIPT := $(SED_SCRIPT)s,CT_INSTALL_DIR_RO=.*,\# CT_INSTALL_DIR_RO,;


ifeq ($(strip $(shell $(TOOLS_DIR)/is_src.sh '$(CROSSTOOL_SRC)')),false)
override LINUX_SRC := $(CROSSTOOL_DIR)/crosstool-ng-$(strip $(CROSSTOOL_SRC)).tar.bz2
CROSSTOOL_URL = http://www.kernel.org/pub/linux/kernel/v2.6/$(notdir $(CROSSTOOL_SRC))
endif

CROSSTOOL_SRC_DIR = $(shell $(TOOLS_DIR)/get_src_dir.sh '$(TOOLCHAIN_DIR)' '$(CROSSTOOL_SRC)')


.PHONY: write_config configure_toolchain build_toolchain toolchain_init_src

toolchain_init_src:
	@ $(TOOLS_DIR)/init_src.sh '$(TOOLCHAIN_DIR)' '$(CROSSTOOL_SRC)' '$(CROSSTOOL_URL)' '$(CROSSTOOL_PATCH_DIR)'
	cd $(abspath $(CROSSTOOL_SRC_DIR)) && \
	./configure --local && \
	make && \
	make install

write_config: toolchain_init_src
	@ echo '=== Writing Crosstool-ng Config File ==='
	@ cd $(abspath $(CROSSTOOL_SRC_DIR)) && \
	cp $(abspath $(TOOLCHAIN_DIR))/template.config .config && \
	sed -i '$(SED_SCRIPT)' .config

configure_toolchain: write_config
	@ echo '=== Configuring Crosstool-ng Toolchain ==='
	cd $(CROSSTOOL_SRC_DIR) && \
	sed -i 's,CT_LOCAL_TARBALLS_DIR=.*,CT_LOCAL_TARBALLS_DIR=\"$(TARBALLS_DIR)\",' .config && \
	./ct-ng build
